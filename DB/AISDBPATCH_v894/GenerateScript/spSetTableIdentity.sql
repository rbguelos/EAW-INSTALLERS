/****** Object:  StoredProcedure [dbo].[spSetTableIdentity] ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spSetTableIdentity]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spSetTableIdentity]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSetTableIdentity] 
--DECLARE
	@TABLENAME VARCHAR(50) = 'CashAdvance',
	@IDENTITYCOLUMN VARCHAR(50) = 'CashAdvanceId',
	@IDENTITYCOLUMNDATATYPE varchar(50) = NULL,
	@SCHEMA VARCHAR(50) = 'accountability'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

BEGIN TRY

BEGIN TRAN

	DECLARE @RETURNVALUE SMALLINT
	DECLARE @RETURNMESSAGE VARCHAR(2048)


	SET @RETURNVALUE = 0


	DECLARE @CMD VARCHAR(max)

	--this will create identity column set to primary key if the column to be created do not exist
	IF NOT EXISTS(
		SELECT COLUMN_NAME FROM information_schema.COLUMNS
		WHERE COLUMN_NAME=@IDENTITYCOLUMN AND TABLE_NAME=@TABLENAME
		)
			BEGIN
				SET @CMD = 'ALTER TABLE ' + '[' + @SCHEMA + '].' + '['+ @TABLENAME +'] ADD [' + @IDENTITYCOLUMN + '] '+ COALESCE(@IDENTITYCOLUMNDATATYPE,'bigint') +' NOT NULL IDENTITY (1, 1) PRIMARY KEY'
				EXEC (@CMD)		
			SET @RETURNVALUE = 1
			SET @RETURNMESSAGE = 'Table ' + @TABLENAME + ' has been successfully set to identity.'
			GOTO END_TRAN
			END
	ELSE
	BEGIN	

	--checks if already set to identity
	IF EXISTS (SELECT * FROM (SELECT @TABLENAME AS TableName, OBJECTPROPERTY(OBJECT_ID(@TABLENAME), 'TableHasIdentity') AS TableHasIdentity 
	WHERE OBJECTPROPERTY(OBJECT_ID(@TABLENAME), 'TableHasIdentity') = 1)TBL
	INNER JOIN (SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
	WHERE COLUMN_NAME = @IDENTITYCOLUMN
	AND TABLE_NAME = @TABLENAME
	AND TABLE_SCHEMA = @SCHEMA
	)TBL2 ON TBL.TableName = TBL2.TABLE_NAME)
	BEGIN
		SET @RETURNVALUE = 0
		SET @RETURNMESSAGE = @TABLENAME + ' already set to identity.'
		goto END_TRAN
	END


--this will remove/update duplicate primary keys
	SET @CMD ='
	DECLARE @ID BIGINT
	SET @ID = COALESCE((SELECT MAX('+ @IDENTITYCOLUMN +') FROM [' + @SCHEMA + '].[' + @TABLENAME +']),0)
	;WITH D AS(SELECT DetailId = ROW_NUMBER() OVER (PARTITION BY '+ @IDENTITYCOLUMN +' ORDER BY '+ @IDENTITYCOLUMN +')
	, '+ @IDENTITYCOLUMN +'
	 FROM [' + @SCHEMA + '].['+ @TABLENAME +'])
	UPDATE D SET '+ @IDENTITYCOLUMN +' = @ID + DetailId WHERE DetailId > 1 OR COALESCE('+ @IDENTITYCOLUMN +',0) = 0'

	EXEC (@CMD)


	--DECLARE @TABLENAME VARCHAR(50)
	--DECLARE @IDENTITYCOLUMN VARCHAR(50)
	DECLARE @ISPRIMARYKEY BIT

	SET @ISPRIMARYKEY = 1

	DECLARE @CNT SMALLINT
	DECLARE @MAXCNT SMALLINT


	DECLARE @COLUMNS VARCHAR(MAX)
	SET @COLUMNS = ''

	SET @CMD = 'IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''[' + @SCHEMA + '].[TMP_' + @TABLENAME + ']'') AND type in (N''U''))
DROP TABLE [' + @SCHEMA + '].[TMP_' + @TABLENAME + ']'
		EXEC (@CMD)


	DECLARE @TABLESCRIPT NVARCHAR(max)
	SET @TABLESCRIPT = 'CREATE TABLE ['+@SCHEMA+'].[TMP_' + @TABLENAME + '] ('

	SET @MAXCNT = (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLENAME)

	SET @CNT = 0

	--DELETE PRIMARY KEY IF EXISTS
	IF EXISTS (SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_NAME = @TABLENAME AND TABLE_SCHEMA = @SCHEMA AND CONSTRAINT_NAME = 'PK_'+@TABLENAME)
	BEGIN
		SET @CMD = 'ALTER TABLE [' + @SCHEMA + '].['+@TABLENAME+'] DROP CONSTRAINT PK_'+@TABLENAME
		EXEC (@CMD)
	END


	--CREATE CREATE TMP TABLE that will hold the original table data
	WHILE @CNT < @MAXCNT

	BEGIN
		SET @CNT = @CNT + 1
		
		IF @COLUMNS <> ''
		BEGIN
			SET @COLUMNS = @COLUMNS + ',' + '[' + (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLENAME AND TABLE_SCHEMA = @SCHEMA AND ORDINAL_POSITION = @CNT) + '] '
		END
		ELSE
		BEGIN
			SET @COLUMNS = '[' + (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLENAME AND TABLE_SCHEMA = @SCHEMA AND ORDINAL_POSITION = @CNT) + '] '
		END
		if @TABLESCRIPT = 'CREATE TABLE [' + @SCHEMA + '].[TMP_' + @TABLENAME + '] ('
			begin
				SET @TABLESCRIPT = @TABLESCRIPT + '[' + (SELECT TBL.COLUMN_NAME + '] ' + TBL.DataType  + ' '
				+ CASE WHEN TBL.COLUMN_NAME = @IDENTITYCOLUMN THEN ' IDENTITY(1,1) NOT NULL' ELSE TBL.IS_NULL END
				FROM (
				SELECT
					ID = ROW_NUMBER() OVER (ORDER BY TABLE_NAME, CASE WHEN COLUMN_NAME = @IDENTITYCOLUMN THEN -1 ELSE ORDINAL_POSITION END),
					ORDINAL_POSITION = CASE WHEN COLUMN_NAME = @IDENTITYCOLUMN THEN 0 ELSE ORDINAL_POSITION END,
					TABLE_NAME,
					COLUMN_NAME,
					DataType = '[' + DATA_TYPE + ']' + 
					CASE WHEN DATA_TYPE IN ('image','text','binary','ntext') THEN '' ELSE 
					CASE coalesce(CHARACTER_MAXIMUM_LENGTH,0) 
											WHEN 0 THEN ''
											WHEN -1 THEN '(max)'
											ELSE '(' + CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR) + ')' END END,
					[IS_NULL] = CASE IS_NULLABLE
						WHEN 'YES' THEN 'NULL'
						ELSE 'NOT NULL' END
				FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLENAME
				)TBL WHERE TBL.ID = @CNT)
			end
		else
			begin
				SET @TABLESCRIPT = @TABLESCRIPT + ',[' + (SELECT TBL.COLUMN_NAME + '] ' + TBL.DataType + ' '
				+ CASE WHEN TBL.COLUMN_NAME = @IDENTITYCOLUMN THEN ' IDENTITY(1,1) NOT NULL' ELSE TBL.IS_NULL END
				FROM (
				SELECT
					ID = ROW_NUMBER() OVER (ORDER BY TABLE_NAME, CASE WHEN COLUMN_NAME = @IDENTITYCOLUMN THEN -1 ELSE ORDINAL_POSITION END),
					ORDINAL_POSITION = CASE WHEN COLUMN_NAME = @IDENTITYCOLUMN THEN 0 ELSE ORDINAL_POSITION END,
					TABLE_NAME,
					COLUMN_NAME,
					DataType = DATA_TYPE + 
					CASE WHEN DATA_TYPE IN ('image','text','binary','ntext') THEN '' ELSE 
					CASE coalesce(CHARACTER_MAXIMUM_LENGTH,0) 
											WHEN 0 THEN ''
											WHEN -1 THEN '(max)'
											ELSE '(' + CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR) + ')' END END,
					[IS_NULL] = CASE IS_NULLABLE
						WHEN 'YES' THEN 'NULL'
						ELSE 'NOT NULL' END
				FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLENAME
				AND TABLE_SCHEMA = @SCHEMA
				--ORDER BY TABLE_NAME, ORDINAL_POSITION
				)TBL WHERE TBL.ID = @CNT)
			end
	END
	SET @TABLESCRIPT = @TABLESCRIPT + ') ON [PRIMARY]'

	EXEC(@TABLESCRIPT)
	
	SET @CMD = 'ALTER TABLE [' + @SCHEMA + '].[Tmp_'+@TABLENAME+'] SET (LOCK_ESCALATION = TABLE)'
	EXEC (@CMD)


	
	--CHECK WITH DUPLICATE KEYS
	SET @CMD = '
		SELECT REPLACE(((SELECT CAST(D.'+ @IDENTITYCOLUMN +' AS VARCHAR) + '','' FROM
		(SELECT DetailId = ROW_NUMBER() OVER (PARTITION BY ' + @IDENTITYCOLUMN + ' ORDER BY ' + @IDENTITYCOLUMN + '), '+ @IDENTITYCOLUMN + ' FROM ['+ @SCHEMA + '].[' + @TABLENAME + '])D
		WHERE D.DetailId > 1 FOR XML PATH(''''))+ ''_''),'',_'','''')'
	
	DECLARE @TBLMSG TABLE (MSG VARCHAR(MAX))
		INSERT INTO @TBLMSG EXEC(@CMD)
	IF EXISTS(SELECT * FROM @TBLMSG)
	BEGIN
		SET @RETURNMESSAGE = (SELECT TOP 1 MSG FROM @TBLMSG)
	END
	
	IF (COALESCE(@RETURNMESSAGE,'') <> '')
	BEGIN
		SET @RETURNVALUE = 0
		SET @RETURNMESSAGE = 'Duplicate keys detected - ' + @RETURNMESSAGE
		GOTO END_TRAN
	END


	--insert data from original table to newly created table			
	SET @CMD = 'SET IDENTITY_INSERT [' + @SCHEMA + '].[Tmp_'+@TABLENAME+'] ON 
	' + 'IF EXISTS(SELECT * FROM [' + @SCHEMA + '].['+@TABLENAME+'])
		 INSERT INTO [' + @SCHEMA + '].[Tmp_'+ @TABLENAME + '] ('+ @COLUMNS + ')
			SELECT '+ @COLUMNS + ' FROM [' + @SCHEMA + '].['+@TABLENAME+'] WITH (HOLDLOCK TABLOCKX)
			' + 'SET IDENTITY_INSERT [' + @SCHEMA + '].[Tmp_'+@TABLENAME+'] OFF'
	EXEC (@CMD)

	--delete original table
	SET @CMD = 'DROP TABLE [' + @SCHEMA + '].['+@TABLENAME+']'

	EXEC (@CMD)

	--rename the new table to original table name
	SET @CMD = 'EXECUTE sp_rename N''[' + @SCHEMA + '].[Tmp_'+@TABLENAME+']'', N'''+@TABLENAME+''', ''OBJECT'' '

	EXEC (@CMD)

	--create constraint/primary key
	SET @CMD = 'ALTER TABLE [' + @SCHEMA + '].['+@TABLENAME+'] ADD CONSTRAINT
		PK_'+@TABLENAME+' PRIMARY KEY CLUSTERED 
		(
		'+@IDENTITYCOLUMN+'
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]'

	EXEC (@CMD)


	SET @RETURNVALUE = 1
	SET @RETURNMESSAGE = 'Table ' + @TABLENAME + ' has been successfully set to identity.'
	
	END
	
	END_TRAN:
	COMMIT TRAN

END TRY
BEGIN CATCH
	ROLLBACK TRAN
	SET @RETURNVALUE = 0
	SET @RETURNMESSAGE = ERROR_MESSAGE()
END CATCH

SELECT ReturnValue = @RETURNVALUE, ReturnMessage = @RETURNMESSAGE, TableName = @TABLENAME

END


GO
