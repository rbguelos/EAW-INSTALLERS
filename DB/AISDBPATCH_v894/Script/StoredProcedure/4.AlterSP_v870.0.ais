GO
/****** Object:  StoredProcedure [leave].[spRetrieveEmployeeEligibilityList]    Script Date: 5/27/2020 1:18:02 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[leave].[spRetrieveEmployeeEligibilityList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [leave].[spRetrieveEmployeeEligibilityList]
GO
/****** Object:  StoredProcedure [leave].[spLeaveProcessDetailList]    Script Date: 5/27/2020 1:18:02 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[leave].[spLeaveProcessDetailList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [leave].[spLeaveProcessDetailList]
GO
/****** Object:  StoredProcedure [leave].[spGenerateLeaveProcessEntitledEmployeeList]    Script Date: 5/27/2020 1:18:02 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[leave].[spGenerateLeaveProcessEntitledEmployeeList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [leave].[spGenerateLeaveProcessEntitledEmployeeList]
GO
/****** Object:  StoredProcedure [leave].[spGenerateLeaveProcessEntitledEmployeeList]    Script Date: 5/27/2020 1:18:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================*\
**	   Last Update Date: 04/25/2017
**	   Last Update By: Kris
**	   Last DBVersion executed: v332
\*===========================================*/
CREATE PROCEDURE [leave].[spGenerateLeaveProcessEntitledEmployeeList] 
@LeaveTypeId BIGINT = NULL,
@CompanyId  BIGINT = NULL,
@BranchId BIGINT = NULL,
@DepartmentId  BIGINT = NULL,
@PeriodStartDate DATETIME = NULL,
@PeriodEndDate DATETIME = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
	-- Insert statements for procedure here
	DECLARE @NullDate DATETIME = '1900-01-01'

	SELECT 
		B.LeaveBenefitId,
		B.LeaveTypeSetupId,
		B.ProfileId,
		E.FullName,
		E.CompanyId,
		E.BranchId,
		E.DepartmentId,
		E.Company,
		E.Branch,
		E.Department,
		E.HireDate,
		R.RehireDate
	FROM leave.LeaveBenefit B
	/* Employee */
	JOIN (
		SELECT
			X.*,
			CASE
				WHEN NULLIF(ISNULL(R.RehireDate, @NullDate), @NullDate) IS NULL
				THEN X.HireDate
				ELSE CASE WHEN R.RehireDate > X.HireDate THEN R.RehireDate ELSE X.HireDate END
			END AS ConditionHireDate,
			CASE
				WHEN NULLIF(ISNULL(S.SeparationDate, @NullDate), @NullDate) IS NULL
				THEN X.SeparationDate
				ELSE CASE WHEN S.SeparationDate > X.SeparationDate THEN S.SeparationDate ELSE X.SeparationDate END
			END AS ConditionSeparationDate
		FROM employee.FN_GETEmployeeInformation() X
		/* Rehire/Renewal Dates */
		OUTER APPLY (
			SELECT TOP 1
				T.RRDate AS RehireDate
			FROM employee.RehireRenewalDate T
			WHERE NULLIF(ISNULL(T.RRDate, @NullDate), @NullDate) IS NOT NULL
			AND T.EmploymentInformationId = X.EmploymentInformationId
			ORDER BY T.RRDate DESC
		) R
		/* Separation Dates */
		OUTER APPLY (
			SELECT TOP 1
				T.SeparationDate AS SeparationDate
			FROM employee.RehireRenewalDate T
			WHERE NULLIF(ISNULL(T.SeparationDate, @NullDate), @NullDate) IS NOT NULL
			AND T.EmploymentInformationId = X.EmploymentInformationId
			ORDER BY T.SeparationDate DESC
		) S
	) E ON E.ProfileId = B.ProfileId
	/* Relevant Hire Dates */
	OUTER APPLY (
		SELECT TOP 1
			T.RRDate AS RehireDate
		FROM employee.RehireRenewalDate T
		WHERE T.EmploymentInformationId = E.EmploymentInformationId
		ORDER BY T.RRDate DESC
	) R
	/* Leave Balance Header */
	CROSS APPLY (
		SELECT * FROM leave.LeaveBalanceHeader X
		WHERE X.LeaveTypeSetupId = B.LeaveTypeSetupId
		AND X.ProfileId = B.ProfileId
	) H
	WHERE (ISNULL(@CompanyId, 0) = 0 OR E.CompanyId = ISNULL(@CompanyId, 0))
	AND (ISNULL(@BranchId, 0) = 0 OR E.BranchId = ISNULL(@BranchId, 0))
	AND (ISNULL(@DepartmentId, 0) = 0 OR E.DepartmentId = ISNULL(@DepartmentId, 0))
	AND (ISNULL(@LeaveTypeId, 0) = 0 OR B.LeaveTypeSetupId = ISNULL(@LeaveTypeId, 0))
	AND E.EmploymentStatusId = 1
	AND ISNULL(NULLIF(@PeriodEndDate, @NullDate), @NullDate) = @NullDate OR E.ConditionHireDate <= @PeriodEndDate
	AND (
		ISNULL(NULLIF(E.ConditionSeparationDate, @NullDate), @NullDate) = @NullDate
		OR
		(ISNULL(NULLIF(@PeriodEndDate, @NullDate), @NullDate) = @NullDate OR E.ConditionSeparationDate > @PeriodEndDate)
	)
	ORDER BY E.FullName
END
GO
/****** Object:  StoredProcedure [leave].[spLeaveProcessDetailList]    Script Date: 5/27/2020 1:18:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================*\
**	   Last Update Date: 04/25/2017
**	   Last Update By: Kris
**	   Last DBVersion executed: v330
\*===========================================*/
CREATE PROCEDURE [leave].[spLeaveProcessDetailList] 
@LeaveProcessHeaderId bigint = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
		D.LeaveProcessDetailId AS LeaveProcessDetailId,
		D.LeaveProcessHeaderId AS LeaveProcessHeaderId,
		D.ProfileId AS ProfileId,
		E.FullName AS EmployeeName,
		E.Company,
		E.Branch,
		E.Department,
		D.CurrentBalance,
		D.CreditsEarned,
		D.CreditsPosted,
		D.CreditsExpired,
		D.NewBalance,
		V.DisplayText AS PostingTypeLabel,
		D.PostingDate,
		E.HireDate
	FROM leave.LeaveProcessDetail D
	/* Employee Information */
	JOIN employee.FN_GETEmployeeInformation() E ON E.ProfileId = D.ProfileId
	/* Posting Type */
	LEFT JOIN maintenance.EnumValues V ON CAST(V.[Value] AS SMALLINT) = D.PostingType AND V.SourceName = 'PostingType'
	WHERE D.LeaveProcessHeaderId  = ISNULL(@LeaveProcessHeaderId, 0)
END
GO
/****** Object:  StoredProcedure [leave].[spRetrieveEmployeeEligibilityList]    Script Date: 5/27/2020 1:18:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul/Kris
-- Create date:	Unknown
-- Updated by:	Bryan Avellana
-- Update date:	May 13, 2020
-- =============================================
CREATE PROC [leave].[spRetrieveEmployeeEligibilityList]
@LeaveTypeSetupId BIGINT = NULL,
@InDays DECIMAL = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		E.LeaveTypeEligibilityId,
		ISNULL(S.AccrualOrgUnit, 0) AS AccrualOrgUnitType,
		ISNULL(E.AccrualOrgUnitIds, '') AS AccrualOrgUnitIds,
		E.LeaveTypeSetupId,
		E.MinTenure AS txtMinTenure,
		E.MaxTenure AS txtMaxTenure,
		CASE WHEN (@InDays > 0)
			THEN (E.CreditAccrual / @InDays)
			ELSE E.CreditAccrual
		END AS txtElegibilityCreditAccrual,
		CASE WHEN (@InDays > 0)
			THEN (E.MaxCreditAccrual / @InDays)
		   ELSE E.MaxCreditAccrual
		END AS txtMaxCreditAccrual,
		ISNULL(E.JobRankId, 0) AS cmbJobRankId,
		ISNULL(R.[Description], '') AS JobRank,
		ISNULL(E.JobGradeId, 0) AS cmbJobGradeId,
		ISNULL(G.[Description], '') AS JobGrade,
		ISNULL(E.JobLevelId, 0) AS cmbJobLevelId,
		ISNULL(L.[Description], '') AS JobLevel,
		ISNULL(P.JobPositionId, 0) AS cmbJobPositionId,
		ISNULL(P.[Name], '') AS JobPosition,
		ISNULL(E.PostingType, 0) AS cmbPostingType,
		ISNULL(T.DisplayText, '') AS PostingType
	FROM leave.LeaveTypeEligibility E
	/* Leave Type Setup */
	LEFT JOIN leave.LeaveTypeSetup S ON S.LeaveTypeSetupId = E.LeaveTypeSetupId
	/* Job Rank */
	LEFT JOIN maintenance.JobRank R ON R.JobRankId = E.JobRankId
	/* Job Grade */
	LEFT JOIN maintenance.JobGrade G ON G.JobGradeId = E.JobGradeId
	/* Job Level */
	LEFT JOIN maintenance.JobLevel L ON L.JobLevelId = E.JobLevelId
	/* Job Position */
	LEFT JOIN maintenance.JobPosition P ON P.JobPositionId = E.JobPositionId
	/* Posting Type */
	LEFT JOIN maintenance.EnumValues T ON CAST(T.[Value] AS SMALLINT) = E.PostingType AND T.SourceName = 'PostingType'
	WHERE E.LeaveTypeSetupId = @LeaveTypeSetupId
	ORDER BY txtMinTenure ASC
END
GO