

/*sync table AllowanceOther_Deleted to table AllowanceOther structure*/
IF NOT OBJECT_ID ('[payroll].[AllowanceOther_Deleted]') IS NULL
BEGIN
	DECLARE @CMD NVARCHAR(MAX)
	,@COLS NVARCHAR(MAX)

	IF NOT OBJECT_ID('[payroll].[tmp_AllowanceOther_Deleted]') IS NULL
		DROP TABLE [payroll].[tmp_AllowanceOther_Deleted];

	/*GENERATE TMP TABLE*/
	SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[tmp_AllowanceOther_Deleted] FROM payroll.AllowanceOther WHERE 1=0
	UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM payroll.AllowanceOther WHERE 1=0;
	ALTER TABLE [payroll].[tmp_AllowanceOther_Deleted] ALTER COLUMN [TransactionDate] DATETIME NULL;
	
	set @COLS = stuff((SELECT ','+QUOTENAME([name]) FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOther_Deleted]')
AND [name] IN(SELECT [name] FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOther]')) for xml PATH('')),1,1,'');
	IF NOT OBJECT_ID('[payroll].[AllowanceOther_Deleted]') IS NULL
	BEGIN
		SET @CMD = CONCAT('INSERT INTO [payroll].[tmp_AllowanceOther_Deleted](',@COLS,')',  'SELECT ', @COLS,' FROM [payroll].[AllowanceOther_Deleted];');
		/*INSERT DATA FROM [payroll].[AllowanceOther_Deleted] TO TABLE [payroll].[tmp_AllowanceOther_Deleted] */
		EXEC sys.sp_executesql @CMD;
		DROP TABLE [payroll].[AllowanceOther_Deleted];
		exec sys.sp_rename @objname = '[payroll].[tmp_AllowanceOther_Deleted]', @newname = 'AllowanceOther_Deleted';
	END
	--print @CMD
END
GO

/*sync table AllowanceOtherPayment_Deleted to table AllowanceOtherPayment structure*/
IF NOT OBJECT_ID ('[payroll].[AllowanceOtherPayment_Deleted]') IS NULL
BEGIN
	DECLARE @CMD NVARCHAR(MAX)
	,@COLS NVARCHAR(MAX)

	/*GENERATE TMP TABLE*/
	IF NOT OBJECT_ID('[payroll].[tmp_AllowanceOtherPayment_Deleted]') IS NULL
		DROP TABLE [payroll].[tmp_AllowanceOtherPayment_Deleted];

	SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[tmp_AllowanceOtherPayment_Deleted] FROM payroll.AllowanceOtherPayment WHERE 1=0
	UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM payroll.AllowanceOtherPayment WHERE 1=0;
	ALTER TABLE [payroll].[tmp_AllowanceOtherPayment_Deleted] ALTER COLUMN [TransactionDate] DATETIME NULL;

	
	set @COLS = stuff((SELECT ','+QUOTENAME([name]) FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOtherPayment_Deleted]')
AND [name] IN(SELECT [name] FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOtherPayment]')) for xml PATH('')),1,1,'');
	IF NOT OBJECT_ID('[payroll].[AllowanceOtherPayment_Deleted]') IS NULL
	BEGIN
		SET @CMD = CONCAT('INSERT INTO [payroll].[tmp_AllowanceOtherPayment_Deleted](',@COLS,')',  'SELECT ', @COLS,' FROM [payroll].[AllowanceOtherPayment_Deleted];');
		/*INSERT DATA FROM [payroll].[AllowanceOtherPayment_Deleted] TO TABLE [payroll].[tmp_AllowanceOtherPayment_Deleted] */
		EXEC sys.sp_executesql @CMD;
		DROP TABLE [payroll].[AllowanceOtherPayment_Deleted];
		exec sys.sp_rename @objname = '[payroll].[tmp_AllowanceOtherPayment_Deleted]', @newname = 'AllowanceOtherPayment_Deleted';
	END
	--print @CMD
END

GO

/*sync table AllowanceOtherChargeCode_Deleted to table AllowanceOtherChargeCode structure*/
IF NOT OBJECT_ID ('[payroll].[AllowanceOtherChargeCode_Deleted]') IS NULL
BEGIN
	DECLARE @CMD NVARCHAR(MAX)
	,@COLS NVARCHAR(MAX)

	/*GENERATE TMP TABLE*/
	IF NOT OBJECT_ID('[payroll].[tmp_AllowanceOtherChargeCode_Deleted]') IS NULL
		DROP TABLE [payroll].[tmp_AllowanceOtherChargeCode_Deleted];

	SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[tmp_AllowanceOtherChargeCode_Deleted] FROM payroll.AllowanceOtherChargeCode WHERE 1=0
	UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM payroll.AllowanceOtherChargeCode WHERE 1=0
	ALTER TABLE [payroll].[tmp_AllowanceOtherChargeCode_Deleted] ALTER COLUMN [TransactionDate] DATETIME NULL;
	
	set @COLS = stuff((SELECT ','+QUOTENAME([name]) FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOtherChargeCode_Deleted]')
AND [name] IN(SELECT [name] FROM SYS.columns WHERE object_id = object_id('[payroll].[AllowanceOtherChargeCode]')) for xml PATH('')),1,1,'');
	IF NOT OBJECT_ID('[payroll].[AllowanceOtherChargeCode_Deleted]') IS NULL
	BEGIN
		SET @CMD = CONCAT('INSERT INTO [payroll].[tmp_AllowanceOtherChargeCode_Deleted](',@COLS,')',  'SELECT ', @COLS,' FROM [payroll].[AllowanceOtherChargeCode_Deleted];');
		/*INSERT DATA FROM [payroll].[AllowanceOtherChargeCode_Deleted] TO TABLE [payroll].[tmp_AllowanceOtherChargeCode_Deleted] */
		EXEC sys.sp_executesql @CMD;
		DROP TABLE [payroll].[AllowanceOtherChargeCode_Deleted];
		exec sys.sp_rename @objname = '[payroll].[tmp_AllowanceOtherChargeCode_Deleted]', @newname = 'AllowanceOtherChargeCode_Deleted';
	END
	--print @CMD
END

GO

;


IF NOT OBJECT_ID('[payroll].[trgBackupDeletedAllowanceOther]') IS NULL
DROP TRIGGER [payroll].[trgBackupDeletedAllowanceOther]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RME
-- Create date: 2/7/2020
-- Description:	backup deleted allowance from backgroud
-- =============================================
CREATE TRIGGER [payroll].[trgBackupDeletedAllowanceOther] 
   ON  [payroll].[AllowanceOther] 
   AFTER DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		IF OBJECT_ID('[payroll].[AllowanceOther_Deleted]') IS NULL
		BEGIN
			SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[AllowanceOther_Deleted] FROM DELETED
			UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM DELETED WHERE 1=0/*this will ignore saving of identiy propery of identity column*/
		END
		ELSE
		BEGIN
			/*
				NOTE: ERROR WILL OCCUR IF NEW COLUMNS WAS ADDED TO THE SOURCE TABLE [payroll].[AllowanceOther]
				ALL NEW COLUMNS ADDED TO  [payroll].[AllowanceOther]  MUST BE ADDED TO [payroll].[AllowanceOther_Deleted]
			*/
			INSERT INTO [payroll].[AllowanceOther_Deleted]
				SELECT *,[TransactionDate] = GETDATE() FROM DELETED
		END
		
END
GO

ALTER TABLE [payroll].[AllowanceOther] ENABLE TRIGGER [trgBackupDeletedAllowanceOther]
GO




IF NOT OBJECT_ID('[payroll].[trgBackupDeletedAllowanceOtherPayment]') IS NULL
DROP TRIGGER [payroll].[trgBackupDeletedAllowanceOtherPayment]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RME
-- Create date: 2/7/2020
-- Description:	backup deleted allowance from backgroud
-- =============================================
CREATE TRIGGER [payroll].[trgBackupDeletedAllowanceOtherPayment] 
   ON  [payroll].[AllowanceOtherPayment] 
   AFTER DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		IF OBJECT_ID('[payroll].[AllowanceOtherPayment_Deleted]') IS NULL
		BEGIN
			SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[AllowanceOtherPayment_Deleted] FROM DELETED
			UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM DELETED WHERE 1=0/*this will ignore saving of identiy propery of identity column*/
		END
		ELSE
		BEGIN
			/*
				NOTE: ERROR WILL OCCUR IF NEW COLUMNS WAS ADDED TO THE SOURCE TABLE [payroll].[AllowanceOtherPayment]
				ALL NEW COLUMNS ADDED TO  [payroll].[AllowanceOtherPayment]  MUST BE ADDED TO [payroll].[AllowanceOtherPayment_Deleted]
			*/
			INSERT INTO [payroll].[AllowanceOtherPayment_Deleted]
				SELECT *,[TransactionDate] = GETDATE() FROM DELETED
		END
		
END
GO

ALTER TABLE [payroll].[AllowanceOtherPayment] ENABLE TRIGGER [trgBackupDeletedAllowanceOtherPayment]
GO


IF NOT OBJECT_ID('[payroll].[trgBackupDeletedAllowanceOtherChargeCode]') IS NULL
DROP TRIGGER [payroll].[trgBackupDeletedAllowanceOtherChargeCode]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RME
-- Create date: 2/7/2020
-- Description:	backup deleted allowance from backgroud
-- =============================================
CREATE TRIGGER [payroll].[trgBackupDeletedAllowanceOtherChargeCode] 
   ON  [payroll].[AllowanceOtherChargeCode] 
   AFTER DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		IF OBJECT_ID('[payroll].[AllowanceOtherChargeCode_Deleted]') IS NULL
		BEGIN
			SELECT *,[TransactionDate] = GETDATE() INTO [payroll].[AllowanceOtherChargeCode_Deleted] FROM DELETED
			UNION ALL SELECT *,[TransactionDate] = GETDATE() FROM DELETED WHERE 1=0/*this will ignore saving of identiy propery of identity column*/
		END
		ELSE
		BEGIN
			/*
				NOTE: ERROR WILL OCCUR IF NEW COLUMNS WAS ADDED TO THE SOURCE TABLE [payroll].[AllowanceOtherChargeCode]
				ALL NEW COLUMNS ADDED TO  [payroll].[AllowanceOtherChargeCode]  MUST BE ADDED TO [payroll].[AllowanceOtherChargeCode_Deleted]
			*/
			INSERT INTO [payroll].[AllowanceOtherChargeCode_Deleted]
				SELECT *,[TransactionDate] = GETDATE() FROM DELETED
		END
		
END
GO

ALTER TABLE [payroll].[AllowanceOtherChargeCode] ENABLE TRIGGER [trgBackupDeletedAllowanceOtherChargeCode]
GO


